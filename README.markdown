# Arousal-Valence Annotation Tool

A Python-based GUI application for annotating emotions on a two-dimensional arousal-valence plane, designed for researchers studying emotional responses. The tool uses **Tkinter** for the interface and **Matplotlib** for interactive plotting, featuring **Japanese emotion labels** and modular code structure.

## Features
- Interactive plotting of arousal (y-axis) and valence (x-axis) points within a circular plane.
- Draggable Japanese emotion labels (e.g., `目覚めた ●`, `喜び ●`) with reference lines from the origin.
- Adjustable sliders for stimulus valence and intensity (-1 to 1).
- Emotion type selection: Anger, Disgust, Fear, Joy, Sadness, Surprise.
- Username input for session tracking.
- Save/load label layouts to/from `layout.csv`.
- Save point data (time, arousal, valence, etc.) to `emotion_data.csv`.
- UTF-8 encoding for Japanese text support.
- Cross-platform compatibility (tested on Windows).

## Requirements
- **Python**: 3.12.7 (or 3.9+ compatible).
- **Libraries**:
  - `tkinter` (included in standard Python).
  - `matplotlib` (`pip install matplotlib`).
- **Japanese Font**: Meiryo (default on Windows) or alternatives like Noto Sans JP.
- **OS**: Tested on Windows; Linux/Mac may require font installation.
- **Optional**: Anaconda for dependency management.

## Installation

1. Clone or download the project to a local directory, e.g., `c:\Users\Jsyzc\Desktop\emotion circle record\`.
2. Ensure Python 3.12.7 is installed. For Anaconda:
   ```bash
   conda create -n emotion_tool python=3.12.7
   conda activate emotion_tool
   ```
3. Install Matplotlib:
   ```bash
   pip install matplotlib
   ```
4. Verify Japanese font availability:
   - Windows: Meiryo is pre-installed.
   - Linux: Install Noto Sans JP, e.g., `sudo apt install fonts-noto-cjk`.
   - Mac: Install Noto Sans JP via Homebrew, e.g., `brew install font-noto-sans-cjk-jp`.
5. Navigate to the project directory:
   ```bash
   cd c:\Users\Jsyzc\Desktop\emotion circle record
   ```

## Usage

1. Run the application:
   ```bash
   python main.py
   ```
2. Interact with the GUI:
   - **Left-click** on the plot to add points (red for first, green for others; time increments by 30 seconds).
   - **Right-click** and drag to move Japanese labels; release to save position.
   - Adjust **sliders** for stimulus valence and intensity.
   - Select **emotion type** from the dropdown menu.
   - Enter a **username** for session ID.
   - Click **Save & Clear** to save points to `emotion_data.csv` and clear the plot.
   - Click **Save Layout** to save label positions to `layout.csv`.
3. On startup, the app loads `layout.csv` if present, applying saved label positions.
4. Output files (`emotion_data.csv`, `layout.csv`) are saved in the project directory, encoded in UTF-8.

## File Structure

- **`config.py`**: Defines constants (Japanese labels, font, file paths).
- **`plot_utils.py`**: Handles Matplotlib figure initialization and label/line drawing.
- **`data_utils.py`**: Manages CSV saving/loading for layouts and records.
- **`event_handlers.py`**: Defines mouse event handlers (click, release, motion).
- **`arousal_valence_recorder.py`**: Main class integrating UI and logic.
- **`main.py`**: Entry point to launch the Tkinter app.
- **`layout.csv`**: Stores label positions (generated by "Save Layout").
- **`emotion_data.csv`**: Stores point data (generated by "Save & Clear").
- **`LICENSE.txt`**: Contains the MIT License.
- **`README.md`**: This documentation file.

## Troubleshooting

- **Japanese labels not displaying**: Ensure Meiryo or a Japanese font is installed. Update `config.py`:
  ```python
  matplotlib.rcParams['font.family'] = ['Meiryo', 'Noto Sans JP', 'sans-serif']
  ```
- **Layout not loading**: Verify `layout.csv` exists with the correct format (`text,x,y`). Check console logs for debug output, e.g., `Debug: Updated '目覚めた ●' to position (x, y)`. Create a sample if missing:
  ```csv
  text,x,y
  目覚めた ●,0.0,0.5
  ● 驚いた,0.2,0.6
  ```
- **Module import errors**: Clear Python cache:
  ```bash
  del c:\Users\Jsyzc\Desktop\emotion circle record\__pycache__\*.pyc
  ```
  Ensure all files are in the project directory with correct names (case-sensitive).
- **GUI not updating**: Add `canvas.flush_events()` in `load_layout` if needed:
  ```python
  self.canvas.flush_events()
  ```
- **Dependencies**: Check Matplotlib version:
  ```bash
  pip show matplotlib
  ```
  Update if issues occur:
  ```bash
  pip install --upgrade matplotlib
  ```

## License

This project is licensed under the **MIT License**. See [`LICENSE.txt`](./LICENSE.txt) for details.

## Contributing

Contributions are welcome! To contribute:
1. Fork the repository (if hosted on GitHub).
2. Create a feature branch (`git checkout -b feature/new-feature`).
3. Commit changes (`git commit -m "Add new feature"`).
4. Push to the branch (`git push origin feature/new-feature`).
5. Open a pull request.

Please report issues or suggest enhancements via the repository’s issue tracker (if applicable) or contact the maintainer.